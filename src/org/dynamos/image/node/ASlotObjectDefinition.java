/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.dynamos.image.node;

import org.dynamos.image.analysis.*;

@SuppressWarnings("nls")
public final class ASlotObjectDefinition extends PObjectDefinition
{
    private TId _id_;
    private PSlots _slots_;
    private PFunctions _functions_;

    public ASlotObjectDefinition()
    {
        // Constructor
    }

    public ASlotObjectDefinition(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PSlots _slots_,
        @SuppressWarnings("hiding") PFunctions _functions_)
    {
        // Constructor
        setId(_id_);

        setSlots(_slots_);

        setFunctions(_functions_);

    }

    @Override
    public Object clone()
    {
        return new ASlotObjectDefinition(
            cloneNode(this._id_),
            cloneNode(this._slots_),
            cloneNode(this._functions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASlotObjectDefinition(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PSlots getSlots()
    {
        return this._slots_;
    }

    public void setSlots(PSlots node)
    {
        if(this._slots_ != null)
        {
            this._slots_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._slots_ = node;
    }

    public PFunctions getFunctions()
    {
        return this._functions_;
    }

    public void setFunctions(PFunctions node)
    {
        if(this._functions_ != null)
        {
            this._functions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._functions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._slots_)
            + toString(this._functions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._slots_ == child)
        {
            this._slots_ = null;
            return;
        }

        if(this._functions_ == child)
        {
            this._functions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._slots_ == oldChild)
        {
            setSlots((PSlots) newChild);
            return;
        }

        if(this._functions_ == oldChild)
        {
            setFunctions((PFunctions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
